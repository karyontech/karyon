searchState.loadedDescShard("karyon_p2p", 0, "A lightweight, extensible, and customizable peer-to-peer …\nBackend serves as the central entry point for initiating …\nthe Configuration for the P2P network.\nContains the error value\nRepresents karyon’s p2p Error.\nContains the success value\nRepresents a unique identifier for a peer.\nRepresents the network version and protocol version used …\nA list of bootstrap peers for the seeding process.\nThe Configuration for the P2P network.\nThe Configuration for the P2P network.\nHolds the peer connection\nDiscovery instance.\nTCP/UDP port for lookup and refresh processes.\nEnable monitor\nEnables TLS for all connections.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTimeout duration for the handshake with new peers, in …\nPeer’s ID\nThe number of available inbound slots for incoming …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIdentity Key pair\nAn optional listening endpoint to accept incoming …\nThe maximum number of retries for outbound connection …\nMaximum allowable time for a live connection with a peer …\nThe number of available inbound slots for incoming …\nThe number of available outbound slots for outgoing …\nTimeout duration for a peer response during the lookup …\nThe maximum number of retries for outbound connection …\nResponsible for network and system monitoring. <code>Read More</code>\nResponsible for network and system monitoring.\nThe number of available outbound slots for outgoing …\nOwn ID\nA list of endpoints representing peers that the <code>Discovery</code> …\nPeer ID\nPeerPool instance.\nA weak pointer to <code>PeerPool</code>\nInterval at which the ping protocol sends ping messages to …\nTimeout duration for receiving the pong message …\nDefines the protocol trait. <code>Read More</code>\nThe maximum number of retries for outbound connection …\nInterval at which the table refreshes its entries, in …\nTimeout duration for a peer response during the table …\nTime interval, in seconds, at which the Discovery restarts …\nThis channel is used to send a stop signal to the read …\nManaging spawned tasks.\nRepresents the network version.\nBackend serves as the central entry point for initiating …\nAttach a custom protocol to the network\nReturns the <code>Config</code>.\nThe Configuration for the P2P network.\nDiscovery instance.\nReturns a map of inbound connected peers with their …\nReturns the <code>KeyPair</code>.\nIdentity Key pair\nReturns the monitor to receive system events.\nResponsible for network and system monitoring.\nCreates a new Backend.\nReturns a map of outbound connected peers with their …\nReturns the <code>PeerID</code>.\nPeer ID\nPeerPool instance.\nReturns the number of currently connected peers.\nRun the Backend, starting the PeerPool and Discovery …\nShuts down the Backend.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthe Configuration for the P2P network.\nA list of bootstrap peers for the seeding process.\nTCP/UDP port for lookup and refresh processes.\nEnable monitor\nEnables TLS for all connections.\nTimeout duration for the handshake with new peers, in …\nThe number of available inbound slots for incoming …\nAn optional listening endpoint to accept incoming …\nThe maximum number of retries for outbound connection …\nMaximum allowable time for a live connection with a peer …\nThe number of available inbound slots for incoming …\nThe number of available outbound slots for outgoing …\nTimeout duration for a peer response during the lookup …\nThe maximum number of retries for outbound connection …\nThe number of available outbound slots for outgoing …\nA list of endpoints representing peers that the <code>Discovery</code> …\nInterval at which the ping protocol sends ping messages to …\nTimeout duration for receiving the pong message …\nThe maximum number of retries for outbound connection …\nInterval at which the table refreshes its entries, in …\nTimeout duration for a peer response during the table …\nTime interval, in seconds, at which the Discovery restarts …\nRepresents the network version.\nConnection queue\nReturns the argument unchanged.\nHandle a connection by pushing it into the queue and wait …\nCalls <code>U::from(self)</code>.\nWaits for the next connection in the queue\nDefines the direction of a network connection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>EventEmitter</code> responsible for sending events to the …\nRegisters a listener for the given Protocol <code>P</code>.\nResponsible for creating outbound connections with other …\nEstablish a connection to the specified <code>endpoint</code>. If the …\nEstablish a connection to the given <code>endpoint</code>. For each new …\nManages available outbound slots.\nEnables secure connection.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIdentity Key pair\nThe maximum number of retries allowed before successfully …\nResponsible for network and system monitoring.\nCreates a new Connector\nShuts down the connector\nManaging spawned tasks.\nHolds the configuration for the P2P network.\nConnection queue\nConnect to the given endpoint using the connector\nThis method will attempt to connect to a peer in the …\nConnector\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nListener\nLookup Service\nCreates a new Discovery\nRefresh Service\nShuts down the discovery\nStart the Discovery\nStart a listener and on success, return the resolved …\nStarts seeding process.\nRouting table\nManaging spawned tasks.\nMaximum number of peers that can be returned in a PeersMsg.\nHolds the configuration for the P2P network.\nConnects to the given endpoint and initiates a lookup …\nConnector\nResolved discovery endpoint\nReturns the argument unchanged.\nHandles inbound connection\nHandles outbound connection\nPeer’s ID\nCalls <code>U::from(self)</code>.\nResolved listen endpoint\nListener\nResponsible for network and system monitoring.\nCreates a new lookup service\nOutbound slots.\nStarts a random lookup\nStarts a self lookup\nSends a FindPeer msg\nSends a Peer msg.\nSends a Peers msg.\nSends a Ping msg.\nSends a Pong msg\nSends a Shutdown msg.\nSet the resolved listen endpoint.\nShuts down the lookup service.\nStart the lookup service.\nStart a listener.\nStarts iterative lookup and populate the routing table.\nRouting Table\nMaximum failures for an entry before removing it from the …\nHolds the configuration for the P2P network.\nInitiates a UDP connection with the entry and attempts to …\nIterates over the entries and initiates a connection.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nResolved listen endpoint\nSet up a UDP listener and start listening for Ping …\nListen to receive a Ping message and respond with a Pong …\nResponsible for network and system monitoring.\nCreates a new refresh service\nInitiates refresh for a specific entry within the routing …\nInitiates periodic refreshing of the routing table. This …\nSends a Ping msg and wait to receive the Pong message.\nSet the resolved listen endpoint.\nShuts down the refresh service\nStart the refresh service\nRouting table\nManaging spawned tasks.\nAddr defines a type for an address, either IP or domain.\nEndpoint defines generic network endpoints for karyon.\nPort defined as a u16.\nReturns the <code>Addr</code> of the endpoint.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the <code>Endpoint</code> is of type <code>Tcp</code>.\nChecks if the <code>Endpoint</code> is of type <code>Tls</code>.\nChecks if the <code>Endpoint</code> is of type <code>Udp</code>.\nChecks if the <code>Endpoint</code> is of type <code>Unix</code>.\nChecks if the <code>Endpoint</code> is of type <code>Ws</code>.\nChecks if the <code>Endpoint</code> is of type <code>Wss</code>.\nCreates a new TCP endpoint from a <code>SocketAddr</code>.\nCreates a new TLS endpoint from a <code>SocketAddr</code>.\nCreates a new UDP endpoint from a <code>SocketAddr</code>.\nCreates a new Unix endpoint from a <code>UnixSocketAddr</code>.\nCreates a new WS endpoint from a <code>SocketAddr</code>.\nCreates a new WSS endpoint from a <code>SocketAddr</code>.\nReturns the <code>Port</code> of the endpoint.\nContains the error value\nRepresents karyon’s p2p Error.\nContains the success value\nkey cryptography type\nA Secret key\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new random keypair.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the public key of this keypair.\nGet the secret key of this keypair.\nSign a message using the private key.\nVerify a signature on a message with this public key.\nResponsible for creating inbound connections with other …\nManages available inbound slots.\nEnables secure connection.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIdentity Key pair\nResponsible for network and system monitoring.\nCreates a new Listener\nShuts down the listener\nStarts a listener on the given <code>endpoint</code>. For each incoming …\nManaging spawned tasks.\nFindPeer message used to find a specific peer.\nDefines the main message in the karyon p2p network.\nDefines message commands.\nRepresents the header of a message.\nPeerMsg containing information about a peer.\nPeersMsg a list of <code>PeerMsg</code>.\nPing message with a nonce and version information.\nPing message with a nonce.\nDefines a message related to a specific protocol.\nShutdown message.\nVerAck message acknowledges the receipt of a Version …\nVersion message, providing information about a peer’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResponsible for network and system monitoring.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Monitor\nSends a new monitor event to subscribers.\nRegisters a new event listener for the provided topic.\nDefines connection-related events.\nDefines <code>Discovery</code> events.\nDefines <code>PP</code> events.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBroadcast a message to all connected peers using the …\nReturns the <code>Config</code>\nThe Configuration for the P2P network.\nHolds the peer connection\nReturns the direction of the connection, which can be …\nReturns the peer’s ID\nPeer’s ID\nCheck if the connection is Inbound\nCreates a new peer\nReturns own ID\nOwn ID\nReturns <code>PeerPool</code> pointer\nA weak pointer to <code>PeerPool</code>\nRun a read loop to handle incoming messages from the peer …\nReceives a new msg from this peer connection.\nReturns the remote endpoint for the peer\nRun the peer\nRun running the Connect Protocols for this peer connection.\nSend a msg to this peer connection using the specified …\nShuts down the peer\nThis channel is used to send a stop signal to the read …\nManaging spawned tasks.\nRepresents a unique identifier for a peer.\nCreates a new PeerID.\nGenerates a random PeerID.\nAttach a custom protocol to the network\nBroadcast a message to all connected peers using the …\nThe Configuration for the P2P network.\nConnection queue\nChecks if the peer list contains a peer with the given …\nA global Executor\nReturns the argument unchanged.\nPeer’s ID\nReturns a map of inbound peers with their endpoints.\nCalls <code>U::from(self)</code>.\nResponsible for network and system monitoring.\nCreates a new PeerPool\nAdd a new peer to the peer list.\nReturns a map of outbound peers with their endpoints.\nHolds the running peers.\nReturns the number of currently connected peers.\nHashmap contains protocols with their versions\nHashmap contains protocol constructors.\nShuts down the peer and remove it from the peer list.\nAttach the core protocols.\nShuts down\nStarts the <code>PeerPool</code>\nManaging spawned tasks.\nMessage event, contains a vector of bytes.\nThe Protocol trait defines the interface for core protocols\nProtocol event\nShutdown event signals the protocol to gracefully shut …\nReturns the argument unchanged.\nReturns the unique ProtocolID associated with the protocol.\nInitialize the protocol\nCalls <code>U::from(self)</code>.\nStart the protocol\nReturns the version of the protocol.\nReturns the argument unchanged.\nInitiate a handshake with a connection.\nCalls <code>U::from(self)</code>.\nCheck if the new connection has compatible protocols.\nSends a Verack message\nSends a Version message\nValidates the given verack msg\nValidates the given version msg\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents the possible result when adding a new entry.\nThe entry is added.\nThe distance limit for the closest buckets.\nThe entry is already exists.\nThe entry is ignored.\nThe maximum number of matched subnets allowed within a …\nThe maximum number of matched subnets across the entire …\nThe entry is restricted and not allowed.\nThis is a modified version of the Kademlia Distributed …\nThe total number of buckets in the routing table.\nAdds a new entry to the table and returns a result …\nReturns a list of bucket indexes that are closest to the …\nReturns an iterator of entries. FIXME: TODO: avoid cloning …\nReturns a list of the closest entries to the given target …\nCheck if the table contains the given key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new RoutingTable\nReturns a random entry from the routing table.\nRemoves an entry with the given key from the routing …\nCheck if two addresses belong to the same subnet.\nThis function iterate through the routing table and counts …\nUpdates the status of an entry in the routing table …\nThe number of entries that can be stored within a single …\nA Bucket represents a group of entries in the routing …\nA BucketEntry represents a peer in the routing table.\nThe entry is connected.\nThe entry is disconnected. This will increase the failure …\nBITFLAGS represent the status of an Entry within a bucket.\nThe entry is incompatible. This entry will not contribute …\nThe entry is ready to reconnect, meaning it has either …\nThe entry is unreachable. This will increase the failure …\nThe entry is unstable. This will increase the failure …\nAdd an entry to the bucket.\nCheck if the bucket contains the given key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the entries in the bucket.\nGet the number of entries in the bucket.\nCreates a new empty Bucket\nReturns an iterator of entries in random order.\nRemove an entry.\nUpdates the status of an entry in the bucket identified by …\nAn Entry represents a peer in the routing table.\nSpecifies the size of the key, in bytes.\nThe unique key identifying the peer.\nThe IP address of the peer.\nUDP/TCP port\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unique key identifying the peer.\nTCP port\nCalculates the XOR distance between two provided keys.\nManages available inbound and outbound slots.\nIncreases the occupied slots by one.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe maximum number of slots.\nCreates a new ConnectionSlots\nDecreases the occupied slots by one and notifies the …\nA condvar for notifying when a slot become available.\nThe number of occupied slots\nWaits for a slot to become available.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a certificate and returns both the certificate …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses the given x509 certificate.\nReturns a TLS client configuration.\nReturns a TLS server configuration.\nVerifies the given certification.\nVerifies the signature of the given certificate.\nRepresents the network version and protocol version used …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new Version\nCheck if a version satisfies a version request.")