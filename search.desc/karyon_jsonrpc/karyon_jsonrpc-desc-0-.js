searchState.loadedDescShard("karyon_jsonrpc", 0, "karyon jsonrpc\nRepresents an RPC client\nA subscription established when the client’s subscribe …\nCalls the provided method, waits for the response, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes a new <code>Client</code> from the provided <code>ClientConfig</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDisconnect the client\nSubscribes to the provided method, waits for the response, …\nUnsubscribes from the provided method, waits for the …\nBuilder for constructing an RPC <code>Client</code>.\nBuild RPC client from <code>ClientBuilder</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ClientBuilder</code>\nCreates a new <code>ClientBuilder</code>\nSet max size for the subscription buffer.\nSet timeout for receiving messages, in milliseconds. …\nConfigure TCP settings for the client.\nManages client requests\nClear the registered channels.\nDispatches a response to the channel associated with the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new MessageDispatcher\nRegisters a new request with a given ID and returns a …\nUnregisters the request with the provided ID\nA subscription established when the client’s subscribe …\nManages subscriptions for the client.\nCloses subscription channels and clear the inner map.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Subscriptions</code>.\nNotifies the subscription about the given notification.\nReturns a new <code>Subscription</code>\nUnsubscribe from the provided subscription id.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the error value\nRepresents karyon’s jsonrpc Error.\nContains the success value\nContains the success value\nRepresents RPC Error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInternal error: Internal JSON-RPC error.\nInvalid params: Invalid method parameter(s).\nInvalid request: The JSON sent is not a valid Request …\nMethod not found: The method does not exist / is not …\nNotification represents a JSON-RPC notification message.\nNotificationResult represents the result of a subscription …\nParse error: Invalid JSON was received by the server.\nRequest represents a JSON-RPC request message. It includes …\nResponse represents a JSON-RPC response message. It …\nSubscriptionID is used to identify a subscription.\nError code indicating the type of error.\nOptional additional data about the error.\nError object if the request failed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique identifier for the request, can be a number or a …\nUnique identifier for the request, can be a number or a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJSON-RPC version, typically “2.0”.\nJSON-RPC version, typically “2.0”.\nJSON-RPC version, typically “2.0”.\nHuman-readable error message.\nThe name of the method to be invoked.\nThe name of the method to be invoked.\nOptional parameters for the method.\nOptional parameters for the method.\nResult of the request if it was successful.\nOptional data about the notification.\nID of the subscription that triggered the notification.\nAddr defines a type for an address, either IP or domain.\nEndpoint defines generic network endpoints for karyon.\nTCP configuration\nReturns the <code>Addr</code> of the endpoint.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the <code>Endpoint</code> is of type <code>Tcp</code>.\nChecks if the <code>Endpoint</code> is of type <code>Tls</code>.\nChecks if the <code>Endpoint</code> is of type <code>Udp</code>.\nChecks if the <code>Endpoint</code> is of type <code>Unix</code>.\nChecks if the <code>Endpoint</code> is of type <code>Ws</code>.\nChecks if the <code>Endpoint</code> is of type <code>Wss</code>.\nCreates a new TCP endpoint from a <code>SocketAddr</code>.\nCreates a new TLS endpoint from a <code>SocketAddr</code>.\nCreates a new UDP endpoint from a <code>SocketAddr</code>.\nCreates a new Unix endpoint from a <code>UnixSocketAddr</code>.\nCreates a new WS endpoint from a <code>SocketAddr</code>.\nCreates a new WSS endpoint from a <code>SocketAddr</code>.\nReturns the <code>Port</code> of the endpoint.\nRepresents an RPC server\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandles a new connection\nHandles the new request, and returns an RPC Response that …\nInitializes a new <code>Server</code> from the provided <code>ServerConfig</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the local endpoint.\nSpawns a new task for handling the new request\nShuts down the RPC server\nStarts the RPC server by spawning a new task for the main …\nStarts the RPC server by running the main accept loop. The …\nBuilder for constructing an RPC <code>Server</code>.\nBuilds the server with the configured options.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ServerBuilder</code>\nCreates a new <code>ServerBuilder</code> With a custom codec.\nAdds a new PubSub RPC service to the server.\nAdds a new RPC service to the server.\nConfigure TCP settings for the server.\nWith an executor.\nWith a custom notification encoder\nRepresents a connection channel for creating/removing …\nRepresents a new subscription\nCloses the <code>Channel</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Channel</code>\nCreates a new <code>Subscription</code>\nCreates a new <code>Subscription</code>\nSends a notification to the subscriber\nRemoves a <code>Subscription</code>\nChecks from the partent if this subscription is still …\nRepresents the RPC method\nDefines the interface for an RPC service.\nA queue for handling responses\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPush an item into the queue, notify all waiting tasks that …\nWait while the queue is empty, remove and return the item …\nRepresents the RPC method\nDefines the interface for an RPC service.")