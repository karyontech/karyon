searchState.loadedDescShard("karyon_net", 0, "Addr defines a type for an address, either IP or domain.\nAlias for <code>Box&lt;dyn Connection&gt;</code>\nConnListener is a generic network listener interface for […\nConnection is a generic network connection interface for […\nEndpoint defines generic network endpoints for karyon.\nContains the error value\nRepresents karyon’s Net Error\nAlias for <code>Box&lt;dyn ConnListener&gt;</code>\nContains the success value\nPort defined as a u16.\nRepresents karyon’s Net Result\nA trait for objects which can be converted to <code>Conn</code>.\nA trait for objects which can be converted to <code>Listener</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the local socket endpoint of this connection\nReturns the remote peer endpoint of this connection\nRecvs data from this connection.\nSends data to this connection\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShortens the buffer, dropping the first <code>cnt</code> bytes and …\nAppends all elements in a slice to the buffer.\nReturns <code>true</code> if the buffer contains no elements.\nReturns the number of elements in the buffer.\nConstructs a new, empty Buffer.\nResizes the buffer in-place so that <code>len</code> is equal to …\nThe size of the message length.\nAlias for <code>Box&lt;dyn Connection&gt;</code>\nConnection is a generic network connection interface for […\nA trait for objects which can be converted to <code>Conn</code>.\nReturns the local socket endpoint of this connection\nReturns the remote peer endpoint of this connection\nRecvs data from this connection.\nSends data to this connection\nAddr defines a type for an address, either IP or domain.\nEndpoint defines generic network endpoints for karyon.\nPort defined as a u16.\nReturns the <code>Addr</code> of the endpoint.\nChecks if the <code>Endpoint</code> is of type <code>Tcp</code>.\nChecks if the <code>Endpoint</code> is of type <code>Tls</code>.\nChecks if the <code>Endpoint</code> is of type <code>Udp</code>.\nChecks if the <code>Endpoint</code> is of type <code>Unix</code>.\nChecks if the <code>Endpoint</code> is of type <code>Ws</code>.\nChecks if the <code>Endpoint</code> is of type <code>Wss</code>.\nCreates a new TCP endpoint from a <code>SocketAddr</code>.\nCreates a new TLS endpoint from a <code>SocketAddr</code>.\nCreates a new UDP endpoint from a <code>SocketAddr</code>.\nCreates a new Unix endpoint from a <code>UnixSocketAddr</code>.\nCreates a new WS endpoint from a <code>SocketAddr</code>.\nCreates a new WSS endpoint from a <code>SocketAddr</code>.\nReturns the <code>Port</code> of the endpoint.\nContains the error value\nContains the success value\nConnListener is a generic network listener interface for […\nAlias for <code>Box&lt;dyn ConnListener&gt;</code>\nA trait for objects which can be converted to <code>Listener</code>.\nMaximum number of bytes to read at a time to construct the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTCP configuration\nTCP connection implementation of the <code>Connection</code> trait.\nConnects to the given TCP address and port.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nListens on the given TCP address and port.\nTLS configuration\nTLS network connection implementation of the <code>Connection</code> …\nTls network listener implementation of the <code>Listener</code> …\nConnects to the given TLS address and port.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nListens on the given TLS address and port.\nTCP configuration\nTCP connection implementation of the <code>Connection</code> trait.\nConnects to the given TCP address and port.\nListens on the given TCP address and port.\nCreates a new TcpConn\nTLS configuration\nTLS network connection implementation of the <code>Connection</code> …\nTls network listener implementation of the <code>Listener</code> …\nConnects to the given TLS address and port.\nListens on the given TLS address and port.\nCreates a new TlsConn\nUDP configuration\nUDP network connection implementation of the <code>Connection</code> …\nConnects to the given UDP address and port.\nListens on the given UDP address and port.\nCreates a new UdpConn\nUnix Conn config\nUnix domain socket implementation of the <code>Connection</code> trait.\nConnects to the given Unix socket path.\nListens on the given Unix socket path.\nCreates a new TcpConn\nWS configuration\nWSS configuration\nWS configuration\nWSS configuration\nWS network connection implementation of the <code>Connection</code> …\nWs network listener implementation of the <code>Listener</code> …\nConnects to the given WS address and port.\nListens on the given WS address and port.\nCreates a new WsConn\nUDP configuration\nUDP network connection implementation of the <code>Connection</code> …\nConnects to the given UDP address and port.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nListens on the given UDP address and port.\nUnix Conn config\nUnix domain socket implementation of the <code>Connection</code> trait.\nConnects to the given Unix socket path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nListens on the given Unix socket path.\nWS configuration\nWSS configuration\nWS configuration\nWSS configuration\nWS network connection implementation of the <code>Connection</code> …\nWs network listener implementation of the <code>Listener</code> …\nConnects to the given WS address and port.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nListens on the given WS address and port.")